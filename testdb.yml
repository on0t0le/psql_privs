- hosts: dbservers

  handlers:
    - name: restart postgres
      service:
        name: postgresql
        state: restarted

    - name: reload postgres
      service:
        name: postgresql
        state: reloaded

  tasks:
    - name: install postgres packages
      apt:
        name: python-psycopg2
        state: present 
        update_cache: yes

    - name: start and enable postgres stack
      service:
        name: postgresql
        state: started
        enabled: yes
      
    - name: change listen address
      blockinfile:
        dest: /etc/postgresql/11/main/postgresql.conf
        block: |      
          listen_addresses = '*'
      notify: restart postgres
      
    - name: replace a localhost entry with our own
      lineinfile:
        path: /etc/postgresql/11/main/pg_hba.conf
        regexp: '^host\s+all\s+all\s+127\.0\.0\.1'
        line: 'host    all             all             127.0.0.1/32            trust'
        owner: postgres
        group: postgres
        mode: 0640
      notify: reload postgres

    - name: open acces with password
      blockinfile:
        path: /etc/postgresql/11/main/pg_hba.conf
        block: |
          host    all     all             0.0.0.0/0                 md5
      notify: reload postgres

    ### Run handlers
    - meta: flush_handlers

    - name: create a new database
      postgresql_db:
        login_host: '127.0.0.1'
        name: "{{ admin.db }}"

    - name: Create admin user
      postgresql_user:
        login_host: '127.0.0.1'
        name: "{{ admin.username }}"
        password: "{{ admin.pwd }}"


    - name: create roles
      postgresql_user:    
        login_host: '127.0.0.1'
        name: "{{ item }}"   
        role_attr_flags: NOLOGIN
      with_items:
      - reader
      - writer 

    - name: Create reader user
      postgresql_user:
        login_host: '127.0.0.1'
        name: "{{ reader.username }}"
        password: "{{ reader.pwd }}"

    - name: Create writer user
      postgresql_user:
        login_host: '127.0.0.1'
        name: "{{ writer.username }}"
        password: "{{ writer.pwd }}"

    # Note that group role memberships apply cluster-wide and therefore are not
    # restricted to database "library" here.
    - name: GRANT reader role TO reader user
      postgresql_privs:
        login_host: '127.0.0.1'
        db: "{{ admin.db }}"
        type: group
        objs: reader
        roles: "{{ reader.username }}"     

    # Note that group role memberships apply cluster-wide and therefore are not
    # restricted to database "library" here.
    - name: GRANT writer role TO writer user
      postgresql_privs:
        login_host: '127.0.0.1'
        db: "{{ admin.db }}"
        type: group
        objs: writer
        roles: "{{ writer.username }}"       

    # "The key word PUBLIC indicates that the privileges are to be granted to all
    # roles, including those that might be created later. PUBLIC can be thought of
    # as an implicitly defined group that always includes all roles. Any
    # particular role will have the sum of privileges granted directly to it,
    # privileges granted to any role it is presently a member of, and privileges
    # granted to PUBLIC."
    #
    # "There is no need to grant privileges to the owner of an object (usually
    # the user that created it), as the owner has all privileges by default. (The
    # owner could, however, choose to revoke some of their own privileges for
    # safety.)"
    #
    # "PostgreSQL grants default privileges on some types of objects to PUBLIC.
    # No privileges are granted to PUBLIC by default on tables, columns, schemas
    # or tablespaces. For other types, the default privileges granted to PUBLIC
    # are as follows: CONNECT and CREATE TEMP TABLE for databases; EXECUTE
    # privilege for functions; and USAGE privilege for languages."

    - name: postgres | revoke default permissions      
      postgresql_privs:
        login_host: '127.0.0.1'
        database: "{{ admin.db }}"
        privs: ALL
        roles: PUBLIC
        state: absent
        type: database


    # Revoke the default permissions on the public schema
    - name: postgres | revoke default schema permissions
      postgresql_privs:
        login_host: '127.0.0.1'
        database: "{{ admin.db }}"
        obj: public
        privs: ALL
        roles: PUBLIC
        state: absent
        type: schema     
    
    - name: GRANT ALL PRIVILEGES ON DATABASE library TO admin
      postgresql_privs:
        login_host: '127.0.0.1'
        db: "{{ admin.db }}"
        privs: ALL
        type: database        
        role: "{{ admin.username }}"        

    # The default public schema is owned by postgres, and since the PUBLIC
    # privileges are revoked we must grant them back to the owner
    - name: postgres | grant database owner public schema privileges      
      postgresql_privs:
        login_host: '127.0.0.1'
        database: "{{ admin.db }}"
        obj: public
        privs: ALL
        roles: "{{ admin.username }}"
        state: present
        type: schema      

    - name: postgres | grant connect privileges     
      postgresql_privs:
        login_host: '127.0.0.1'
        database: "{{ admin.db }}"
        privs: CONNECT
        roles: "{{ item }}"
        state: present
        type: database    
      with_items:
      - reader
      - writer  

    - name: postgres | grant usage privileges on default public schema
      postgresql_privs:
        login_host: '127.0.0.1'
        database: "{{ admin.db }}"
        objs: public
        privs: USAGE
        roles: "{{ item }}"
        state: present
        type: schema
      with_items:
      - reader
      - writer

    - name: Grant privs reader on database library
      postgresql_privs:
        login_host: '127.0.0.1'
        database: "{{ admin.db }}"        
        privs: SELECT          
        objs: ALL_IN_SCHEMA
        schema: public
        roles: reader

    - name: Grant privs writer on database library
      postgresql_privs:
        login_host: '127.0.0.1'
        database: "{{ admin.db }}"        
        privs: SELECT,INSERT,UPDATE,DELETE
        objs: ALL_IN_SCHEMA
        schema: public
        roles: writer

    # Available since version 2.8
    # ALTER DEFAULT PRIVILEGES FOR ROLE admin IN SCHEMA library GRANT SELECT ON TABLES TO reader
    # GRANT SELECT privileges for new TABLES objects created by admin as
    # default to the role reader.
    # For specific
    - name: ALTER privs
      postgresql_privs:
        login_host: '127.0.0.1'
        db: "{{ admin.db }}"
        schema: public
        objs: TABLES
        privs: SELECT
        type: default_privs
        role: reader
        target_roles: "{{ admin.username }}"
    
    - name: ALTER privs
      postgresql_privs:
        login_host: '127.0.0.1'
        db: "{{ admin.db }}"
        schema: public
        objs: TABLES
        privs: SELECT,INSERT,UPDATE,DELETE
        type: default_privs
        role: writer
        target_roles: "{{ admin.username }}"
