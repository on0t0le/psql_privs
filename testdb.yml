- hosts: dbservers

  handlers:
    - name: restart postgres
      service:
        name: postgresql
        state: restarted

    - name: reload postgres
      service:
        name: postgresql
        state: reloaded

  tasks:
    - name: install postgres packages
      apt:
        name: python-psycopg2
        state: present 
        update_cache: yes

    - name: start and enable postgres stack
      service:
        name: postgresql
        state: started
        enabled: yes
      
    - name: change listen address
      blockinfile:
        dest: /etc/postgresql/11/main/postgresql.conf
        block: |      
          listen_addresses = '*'
      notify: restart postgres
      
    - name: replace a localhost entry with our own
      lineinfile:
        path: /etc/postgresql/11/main/pg_hba.conf
        regexp: '^host\s+all\s+all\s+127\.0\.0\.1'
        line: 'host    all             all             127.0.0.1/32            trust'
        owner: postgres
        group: postgres
        mode: 0640
      notify: reload postgres

    - name: open acces with password
      blockinfile:
        path: /etc/postgresql/11/main/pg_hba.conf
        block: |
          host    all     all             0.0.0.0/0                 md5
      notify: restart postgres

    ### Run handlers
    - meta: flush_handlers

    - name: create a new database
      postgresql_db:
        login_host: '127.0.0.1'
        name: "library"

    - name: Create user
      postgresql_user:
        login_host: '127.0.0.1'
        name: librarian
        password: 'Password1'


    - name: create roles
      postgresql_user:    
        login_host: '127.0.0.1'
        name: reader    

    - name: Create user Freeman
      postgresql_user:
        login_host: '127.0.0.1'
        name: freeman
        password: 'Password2'

    # Note that group role memberships apply cluster-wide and therefore are not
    # restricted to database "library" here.
    - name: GRANT reader TO freeman
      postgresql_privs:
        login_host: '127.0.0.1'
        db: library
        type: group
        objs: reader
        roles: freeman        

    # - name: REVOKE ALL ON ALL TABLES IN SCHEMA public FROM librarian and reader
    #   postgresql_privs:
    #     login_host: '127.0.0.1'
    #     db: library
    #     state: absent
    #     privs: ALL
    #     # type: database
    #     # # objs: ALL_IN_SCHEMA
    #     # role: librarian,reader
    #     objs: ALL_IN_SCHEMA
    #     schema: public
    #     role: PUBLIC,librarian,reader
    #   #   type: "{{ item }}"
    #   # with_items:
    #   # - table
    #   # - sequence
    #   # - function


    # "The key word PUBLIC indicates that the privileges are to be granted to all
    # roles, including those that might be created later. PUBLIC can be thought of
    # as an implicitly defined group that always includes all roles. Any
    # particular role will have the sum of privileges granted directly to it,
    # privileges granted to any role it is presently a member of, and privileges
    # granted to PUBLIC."
    #
    # "There is no need to grant privileges to the owner of an object (usually
    # the user that created it), as the owner has all privileges by default. (The
    # owner could, however, choose to revoke some of their own privileges for
    # safety.)"
    #
    # "PostgreSQL grants default privileges on some types of objects to PUBLIC.
    # No privileges are granted to PUBLIC by default on tables, columns, schemas
    # or tablespaces. For other types, the default privileges granted to PUBLIC
    # are as follows: CONNECT and CREATE TEMP TABLE for databases; EXECUTE
    # privilege for functions; and USAGE privilege for languages."

    - name: postgres | revoke default permissions      
      postgresql_privs:
        login_host: '127.0.0.1'
        database: library
        privs: ALL
        roles: PUBLIC
        state: absent
        type: database


    # Revoke the default permissions on the public schema
    - name: postgres | revoke default schema permissions
      postgresql_privs:
        login_host: '127.0.0.1'
        database: library
        obj: public
        privs: ALL
        roles: PUBLIC
        state: absent
        type: schema     
    
    - name: GRANT ALL PRIVILEGES ON DATABASE library TO librarian
      postgresql_privs:
        login_host: '127.0.0.1'
        db: library
        privs: ALL
        type: database        
        role: librarian        

    # The default public schema is owned by postgres, and since the PUBLIC
    # privileges are revoked we must grant them back to the owner
    - name: postgres | grant database owner public schema privileges      
      postgresql_privs:
        login_host: '127.0.0.1'
        database: library
        obj: public
        privs: ALL
        roles: librarian
        state: present
        type: schema      

    - name: postgres | grant connect privileges     
      postgresql_privs:
        login_host: '127.0.0.1'
        database: library
        privs: CONNECT
        roles: reader
        state: present
        type: database      

    - name: postgres | grant usage privileges on default public schema
      postgresql_privs:
        login_host: '127.0.0.1'
        database: library
        objs: public
        privs: USAGE
        roles: reader
        state: present
        type: schema

    - name: Grant privs reader on database library
      postgresql_privs:
        login_host: '127.0.0.1'
        database: library        
        privs: SELECT          
        objs: ALL_IN_SCHEMA
        schema: public
        roles: reader

    # # If objs is omitted for type "database", it defaults to the database
    # # to which the connection is established
    # - name: GRANT ALL PRIVILEGES ON DATABASE library TO librarian
    #   postgresql_privs:
    #     login_host: '127.0.0.1'
    #     db: library
    #     privs: ALL
    #     type: database
    #     role: librarian

    # # Available since version 2.7
    # # Objs must be set, ALL_DEFAULT to TABLES/SEQUENCES/TYPES/FUNCTIONS
    # # ALL_DEFAULT works only with privs=ALL
    # # For specific
    # - name: ALTER DEFAULT PRIVILEGES ON DATABASE library TO librarian
    #   postgresql_privs:
    #     login_host: '127.0.0.1'
    #     db: library
    #     objs: ALL_DEFAULT
    #     privs: ALL
    #     type: default_privs
    #     role: librarian
    #     grant_option: yes

    # # Available since version 2.7
    # # Objs must be set, ALL_DEFAULT to TABLES/SEQUENCES/TYPES/FUNCTIONS
    # # ALL_DEFAULT works only with privs=ALL
    # # For specific
    # - name: ALTER DEFAULT PRIVILEGES ON DATABASE library TO reader, step 1
    #   postgresql_privs:
    #     login_host: '127.0.0.1'
    #     db: library
    #     objs: TABLES,SEQUENCES
    #     privs: SELECT
    #     type: default_privs
    #     role: reader

    # - name: ALTER DEFAULT PRIVILEGES ON DATABASE library TO reader, step 2
    #   postgresql_privs:
    #     login_host: '127.0.0.1'
    #     db: library
    #     objs: TYPES
    #     privs: USAGE
    #     type: default_privs
    #     role: reader

    # # Available since version 2.8
    # - name: GRANT ALL PRIVILEGES ON FOREIGN DATA WRAPPER fdw TO reader
    #   postgresql_privs:
    #     login_host: '127.0.0.1'
    #     db: test
    #     objs: fdw
    #     privs: ALL
    #     type: foreign_data_wrapper
    #     role: reader

    # # Available since version 2.8
    # - name: GRANT ALL PRIVILEGES ON FOREIGN SERVER fdw_server TO reader
    #   postgresql_privs:
    #     login_host: '127.0.0.1'
    #     db: test
    #     objs: fdw_server
    #     privs: ALL
    #     type: foreign_server
    #     role: reader

    # # Available since version 2.8
    # # Grant 'execute' permissions on all functions in schema 'common' to role 'caller'
    # - name: GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA common TO caller
    #   postgresql_privs:
    #     login_host: '127.0.0.1'
    #     type: function
    #     state: present
    #     privs: EXECUTE
    #     roles: caller
    #     objs: ALL_IN_SCHEMA
    #     schema: common

    # # Available since version 2.8
    # # ALTER DEFAULT PRIVILEGES FOR ROLE librarian IN SCHEMA library GRANT SELECT ON TABLES TO reader
    # # GRANT SELECT privileges for new TABLES objects created by librarian as
    # # default to the role reader.
    # # For specific
    # - name: ALTER privs
    #   postgresql_privs:
    #     login_host: '127.0.0.1'
    #     db: library
    #     schema: library
    #     objs: TABLES
    #     privs: SELECT
    #     type: default_privs
    #     role: reader
    #     target_roles: librarian

    # # Available since version 2.8
    # # ALTER DEFAULT PRIVILEGES FOR ROLE librarian IN SCHEMA library REVOKE SELECT ON TABLES FROM reader
    # # REVOKE SELECT privileges for new TABLES objects created by librarian as
    # # default from the role reader.
    # # For specific
    # - name: ALTER privs
    #   postgresql_privs:
    #     login_host: '127.0.0.1'
    #     db: library
    #     state: absent
    #     schema: library
    #     objs: TABLES
    #     privs: SELECT
    #     type: default_privs
    #     role: reader
    #     target_roles: librarian